#!/usr/bin/python

import usb.core
import usb.util
from time import sleep
from sys import argv, exit

class Checktap:
  vendor   = 0x0ef5
  product  = 0x3004
  cmd_init = "\xc0\x00\x00\x00\x00\x00\x00\x00"
  cmd_off  = "\xc1\x00\x00\x00\x32\x00\x00\x00"
  cmd_on   = "\xc1\x00\x00\x00\x31\x00\x00\x00"

  def __init__( self ):
    self.dev = usb.core.find( idVendor=self.vendor, idProduct=self.product )

    if self.dev is None:
      raise ValueError( 'USB device %04x:%04x not found'%( self.vendor, self.product ))

    if self.dev.is_kernel_driver_active( 0 ):
      self.dev.detach_kernel_driver( 0 )

    self.dev.reset( )
    self.dev.set_configuration()

    cfg = self.dev.get_active_configuration( )
    interface_number = cfg[(0,0)].bInterfaceNumber
    alternate_setting = usb.control.get_interface( self.dev, interface_number)
    intf = usb.util.find_descriptor(
      cfg, bInterfaceNumber = interface_number,
      bAlternateSetting = alternate_setting
    )

    self.ep_in = usb.util.find_descriptor(
      intf,
      custom_match = \
      lambda e: \
      usb.util.endpoint_direction(e.bEndpointAddress) == \
      usb.util.ENDPOINT_IN
    )

    assert self.ep_in is not None

    self.send( self.cmd_init )

  def send( self, data ):
    self.dev.ctrl_transfer( 0x21, 0x09, wValue=0x200, wIndex=0, data_or_wLength=data, timeout=200 )

  def on( self ):
    self.send( self.cmd_on )

  def off( self ):
    self.send( self.cmd_off )

def usage( ):
  print "Usage:", argv[0], "on|off"
  exit( -1 )

if __name__ == "__main__":
  c = Checktap( )
  if len(argv) != 2:
    usage( )

  if argv[1] == "on":
    c.on( )
  elif argv[1] == "off":
    c.off( )
  else:
    usage( )



